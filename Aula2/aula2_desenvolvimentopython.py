# -*- coding: utf-8 -*-
"""aula2_desenvolvimentoPython.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fGiR-FIi_IJ8ppIMq_PXAzmROfIfxvbz

Tarefa 2

A tarefa deve ser desenvolvida em grupo de no mínimo 2 e no máximo 3 alunos.

Indicar na entrega da tarefa a equipe de trabalho.

Usando o ChatGPT-Python, escrever prompts para gerar programas Python nas seguintes condições:

* Jogo da Forca: um jogo interativo onde o usuário deve adivinhar palavras, com um número limitado de tentativas.   
* Com outro prompt, sortear uma palavra de uma lista.
* Com outro prompt, escolher o nível de dificuldade pelo tamanho da palavra.
* Com outro prompt, gravar o nome do recordista e o tempo que ele demorou.   
* Com outro prompt, sortear a palavra de uma lista em de 1000 palavras ordenadas por tamanho.
* Com outro prompt, gravar uma lista dos 5 recordistas e mostrar quando um jogador quebra um recorde.

Seja criativo no prompt!!!! Consegue desenhar a forca?
Experimente com prompts diferentes?

Publicar todos os programas em um notebook Jupyter no google colab https://colab.research.google.com/

Publicar o link do notebook Jupyter como resposta da tarefa. (atenção para dar acesso de leitura a todos com o link.)   

Bons estudos!

# Etapa 1 + 2
"""

import random

def jogo_da_forca():
    palavras = ["python", "programacao", "desenvolvimento", "algoritmo", "computador", "inteligencia"]
    palavra_secreta = random.choice(palavras).lower()
    letras_descobertas = ["_" for _ in palavra_secreta]
    tentativas = 6
    letras_erradas = []

    print("🎯 Bem-vindo ao Jogo da Forca!")
    print("Adivinhe a palavra secreta.")
    print(" ".join(letras_descobertas))
    print(f"Você tem {tentativas} tentativas.\n")

    while tentativas > 0 and "_" in letras_descobertas:
        chute = input("Digite uma letra ou a palavra inteira: ").lower().strip()

        if not chute.isalpha():
            print("⚠️ Digite apenas letras (uma letra ou a palavra completa).")
            continue

        # Se for palpite de palavra inteira
        if len(chute) > 1:
            if chute == palavra_secreta:
                letras_descobertas = list(palavra_secreta)
                break
            else:
                print("❌ Palavra incorreta!")
                tentativas -= 1
        else:
            # Se for palpite de uma letra
            if chute in letras_descobertas or chute in letras_erradas:
                print("⚠️ Você já tentou essa letra.")
                continue

            if chute in palavra_secreta:
                print("✅ Boa! A letra existe na palavra.")
                for i, l in enumerate(palavra_secreta):
                    if l == chute:
                        letras_descobertas[i] = chute
            else:
                print("❌ A letra não está na palavra.")
                letras_erradas.append(chute)
                tentativas -= 1

        print("\nPalavra:", " ".join(letras_descobertas))
        print("Letras erradas:", " ".join(letras_erradas))
        print(f"Tentativas restantes: {tentativas}\n")

    if "_" not in letras_descobertas:
        print("🎉 Parabéns! Você adivinhou a palavra:", palavra_secreta)
    else:
        print("💀 Game Over! A palavra era:", palavra_secreta)


if __name__ == "__main__":
    jogo_da_forca()

"""# Etapa 2"""

import random

def jogo_da_forca():
    palavras = ["python", "programacao", "desenvolvimento", "algoritmo", "computador", "inteligencia"]

    print("🎯 Bem-vindo ao Jogo da Forca!")
    print("Escolha a dificuldade:")
    print("1 - Fácil (8 tentativas)")
    print("2 - Médio (6 tentativas)")
    print("3 - Difícil (4 tentativas)")

    while True:
        escolha = input("Digite 1, 2 ou 3: ").strip()
        if escolha == "1":
            tentativas = 8
            break
        elif escolha == "2":
            tentativas = 6
            break
        elif escolha == "3":
            tentativas = 4
            break
        else:
            print("⚠️ Opção inválida, escolha 1, 2 ou 3.")

    palavra_secreta = random.choice(palavras).lower()
    letras_descobertas = ["_" for _ in palavra_secreta]
    letras_erradas = []

    print("\nAdivinhe a palavra secreta.")
    print(" ".join(letras_descobertas))
    print(f"Você tem {tentativas} tentativas.\n")

    while tentativas > 0 and "_" in letras_descobertas:
        chute = input("Digite uma letra ou a palavra inteira: ").lower().strip()

        if not chute.isalpha():
            print("⚠️ Digite apenas letras (uma letra ou a palavra completa).")
            continue

        # Palpite da palavra inteira
        if len(chute) > 1:
            if chute == palavra_secreta:
                letras_descobertas = list(palavra_secreta)
                break
            else:
                print("❌ Palavra incorreta!")
                tentativas -= 1
        else:
            # Palpite de letra única
            if chute in letras_descobertas or chute in letras_erradas:
                print("⚠️ Você já tentou essa letra.")
                continue

            if chute in palavra_secreta:
                print("✅ Boa! A letra existe na palavra.")
                for i, l in enumerate(palavra_secreta):
                    if l == chute:
                        letras_descobertas[i] = chute
            else:
                print("❌ A letra não está na palavra.")
                letras_erradas.append(chute)
                tentativas -= 1

        print("\nPalavra:", " ".join(letras_descobertas))
        print("Letras erradas:", " ".join(letras_erradas))
        print(f"Tentativas restantes: {tentativas}\n")

    if "_" not in letras_descobertas:
        print("🎉 Parabéns! Você adivinhou a palavra:", palavra_secreta)
    else:
        print("💀 Game Over! A palavra era:", palavra_secreta)


if __name__ == "__main__":
    jogo_da_forca()

"""# Etapa 4 e 6"""

import random
import os

RANKING_FILE = "ranking.txt"

def carregar_ranking():
    ranking = []
    if os.path.exists(RANKING_FILE):
        with open(RANKING_FILE, "r") as f:
            for linha in f:
                nome, pontos = linha.strip().split(",")
                ranking.append((nome, int(pontos)))
    return ranking

def salvar_ranking(ranking):
    with open(RANKING_FILE, "w") as f:
        for nome, pontos in ranking[:5]:  # Top 5
            f.write(f"{nome},{pontos}\n")

def mostrar_ranking(ranking):
    print("\n🏆 Ranking Top 5 Jogadores:")
    if not ranking:
        print("Ainda não há jogadores no ranking.")
        return
    for i, (nome, pontos) in enumerate(ranking[:5], start=1):
        print(f"{i}. {nome} - {pontos} pontos")

def jogo_da_forca():
    palavras = ["python", "programacao", "desenvolvimento", "algoritmo", "computador", "inteligencia"]

    jogador = input("Digite seu nome: ").strip()

    print("\n🎯 Bem-vindo ao Jogo da Forca!")
    print("Escolha a dificuldade:")
    print("1 - Fácil (8 tentativas)")
    print("2 - Médio (6 tentativas)")
    print("3 - Difícil (4 tentativas)")

    while True:
        escolha = input("Digite 1, 2 ou 3: ").strip()
        if escolha == "1":
            tentativas = 8
            break
        elif escolha == "2":
            tentativas = 6
            break
        elif escolha == "3":
            tentativas = 4
            break
        else:
            print("⚠️ Opção inválida, escolha 1, 2 ou 3.")

    palavra_secreta = random.choice(palavras).lower()
    letras_descobertas = ["_" for _ in palavra_secreta]
    letras_erradas = []

    print("\nAdivinhe a palavra secreta.")
    print(" ".join(letras_descobertas))
    print(f"Você tem {tentativas} tentativas.\n")

    while tentativas > 0 and "_" in letras_descobertas:
        chute = input("Digite uma letra ou a palavra inteira: ").lower().strip()

        if not chute.isalpha():
            print("⚠️ Digite apenas letras (uma letra ou a palavra completa).")
            continue

        if len(chute) > 1:
            if chute == palavra_secreta:
                letras_descobertas = list(palavra_secreta)
                break
            else:
                print("❌ Palavra incorreta!")
                tentativas -= 1
        else:
            if chute in letras_descobertas or chute in letras_erradas:
                print("⚠️ Você já tentou essa letra.")
                continue

            if chute in palavra_secreta:
                print("✅ Boa! A letra existe na palavra.")
                for i, l in enumerate(palavra_secreta):
                    if l == chute:
                        letras_descobertas[i] = chute
            else:
                print("❌ A letra não está na palavra.")
                letras_erradas.append(chute)
                tentativas -= 1

        print("\nPalavra:", " ".join(letras_descobertas))
        print("Letras erradas:", " ".join(letras_erradas))
        print(f"Tentativas restantes: {tentativas}\n")

    ranking = carregar_ranking()

    if "_" not in letras_descobertas:
        print(f"🎉 Parabéns, {jogador}! Você adivinhou a palavra: {palavra_secreta}")
        print(f"Tentativas restantes: {tentativas}")
        # Atualizar ranking
        ranking.append((jogador, tentativas))
        ranking.sort(key=lambda x: x[1], reverse=True)  # maior pontos primeiro
        salvar_ranking(ranking)
    else:
        print(f"💀 Game Over! A palavra era: {palavra_secreta}")

    mostrar_ranking(ranking)

if __name__ == "__main__":
    jogo_da_forca()

"""# Etapa 5"""

import random
import os

RANKING_FILE = "ranking.txt"

def carregar_ranking():
    ranking = []
    if os.path.exists(RANKING_FILE):
        with open(RANKING_FILE, "r") as f:
            for linha in f:
                nome, pontos = linha.strip().split(",")
                ranking.append((nome, int(pontos)))
    return ranking

def salvar_ranking(ranking):
    with open(RANKING_FILE, "w") as f:
        for nome, pontos in ranking[:5]:  # Top 5
            f.write(f"{nome},{pontos}\n")

def mostrar_ranking(ranking):
    print("\n🏆 Ranking Top 5 Jogadores:")
    if not ranking:
        print("Ainda não há jogadores no ranking.")
        return
    for i, (nome, pontos) in enumerate(ranking[:5], start=1):
        print(f"{i}. {nome} - {pontos} pontos")

def jogo_da_forca():
    # Lista com 100 palavras
    palavras = [
        "python", "programacao", "desenvolvimento", "algoritmo", "computador", "inteligencia",
        "tecnologia", "software", "hardware", "rede", "internet", "banco", "dados", "variavel",
        "função", "classe", "objeto", "metodo", "loop", "condicional", "matriz", "lista", "dicionario",
        "string", "inteiro", "booleano", "flutuante", "arquivo", "input", "output", "debug", "teste",
        "codigo", "programa", "aplicativo", "interface", "usuario", "senha", "criptografia", "criptomoeda",
        "servidor", "cliente", "api", "framework", "biblioteca", "pacote", "modulo", "looping", "compilador",
        "interpretador", "script", "terminal", "comando", "funcoes", "recursao", "matematica", "estatistica",
        "analise", "dados", "machine", "learning", "inteligenciaartificial", "rede", "neural", "treinamento",
        "classificacao", "regressao", "previsao", "modelo", "dadosabertos", "bigdata", "cloud", "informatica",
        "seguranca", "criptografia", "hash", "token", "autenticacao", "autorizacao", "servidorweb",
        "frontend", "backend", "fullstack", "programador", "devops", "deploy", "docker", "virtualizacao",
        "contêiner", "processamento", "memoria", "armazenamento", "cache", "log", "erro", "excecao",
        "projeto", "documentacao", "testeunitario", "integracao", "versao"
    ]

    jogador = input("Digite seu nome: ").strip()

    print("\n🎯 Bem-vindo ao Jogo da Forca!")
    print("Escolha a dificuldade:")
    print("1 - Fácil (8 tentativas)")
    print("2 - Médio (6 tentativas)")
    print("3 - Difícil (4 tentativas)")

    while True:
        escolha = input("Digite 1, 2 ou 3: ").strip()
        if escolha == "1":
            tentativas = 8
            break
        elif escolha == "2":
            tentativas = 6
            break
        elif escolha == "3":
            tentativas = 4
            break
        else:
            print("⚠️ Opção inválida, escolha 1, 2 ou 3.")

    palavra_secreta = random.choice(palavras).lower()
    letras_descobertas = ["_" for _ in palavra_secreta]
    letras_erradas = []

    print("\nAdivinhe a palavra secreta.")
    print(" ".join(letras_descobertas))
    print(f"Você tem {tentativas} tentativas.\n")

    while tentativas > 0 and "_" in letras_descobertas:
        chute = input("Digite uma letra ou a palavra inteira: ").lower().strip()

        if not chute.isalpha():
            print("⚠️ Digite apenas letras (uma letra ou a palavra completa).")
            continue

        if len(chute) > 1:
            if chute == palavra_secreta:
                letras_descobertas = list(palavra_secreta)
                break
            else:
                print("❌ Palavra incorreta!")
                tentativas -= 1
        else:
            if chute in letras_descobertas or chute in letras_erradas:
                print("⚠️ Você já tentou essa letra.")
                continue

            if chute in palavra_secreta:
                print("✅ Boa! A letra existe na palavra.")
                for i, l in enumerate(palavra_secreta):
                    if l == chute:
                        letras_descobertas[i] = chute
            else:
                print("❌ A letra não está na palavra.")
                letras_erradas.append(chute)
                tentativas -= 1

        print("\nPalavra:", " ".join(letras_descobertas))
        print("Letras erradas:", " ".join(letras_erradas))
        print(f"Tentativas restantes: {tentativas}\n")

    ranking = carregar_ranking()

    if "_" not in letras_descobertas:
        print(f"🎉 Parabéns, {jogador}! Você adivinhou a palavra: {palavra_secreta}")
        print(f"Tentativas restantes: {tentativas}")
        # Atualizar ranking
        ranking.append((jogador, tentativas))
        ranking.sort(key=lambda x: x[1], reverse=True)  # maior pontos primeiro
        salvar_ranking(ranking)
    else:
        print(f"💀 Game Over! A palavra era: {palavra_secreta}")

    mostrar_ranking(ranking)

if __name__ == "__main__":
    jogo_da_forca()

